<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>测试</title>
    <link href="/posts/17ef1b6d.html"/>
    <url>/posts/17ef1b6d.html</url>
    
    <content type="html"><![CDATA[<p>dddd</p>]]></content>
    
    
    <categories>
      
      <category>分类测试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>windows下的CMake使用</title>
    <link href="/posts/baf80963.html"/>
    <url>/posts/baf80963.html</url>
    
    <content type="html"><![CDATA[<h1 id="windows下的CMake使用"><a href="#windows下的CMake使用" class="headerlink" title="windows下的CMake使用"></a>windows下的CMake使用</h1><h3 id="Iinstall-函数"><a href="#Iinstall-函数" class="headerlink" title="Iinstall 函数"></a>Iinstall 函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">install(TARGETS targets... [EXPORT &lt;export-name&gt;]<br>        [[ARCHIVE|LIBRARY|RUNTIME|OBJECTS|FRAMEWORK|BUNDLE|<br>          PRIVATE_HEADER|PUBLIC_HEADER|RESOURCE]<br>         [DESTINATION &lt;<span class="hljs-built_in">dir</span>&gt;]<br>         [PERMISSIONS permissions...]<br>         [CONFIGURATIONS [Debug|Release|...]]<br>         [COMPONENT &lt;component&gt;]<br>         [OPTIONAL] [EXCLUDE_FROM_ALL]<br>         [NAMELINK_ONLY|NAMELINK_SKIP]<br>        ] [...]<br>        [INCLUDES DESTINATION [&lt;<span class="hljs-built_in">dir</span>&gt; ...]]<br>        )<br></code></pre></td></tr></table></figure><ol><li>可执行文件被当做 <code>RUNTIME</code>;</li><li>静态库一般被看做 <code>ARCHIVE</code>，模块库（Module libraries）当做 <code>LIBRARY</code>;</li><li>非DLL平台，动态库被当做 <code>LIBRARY</code>;</li><li>DLL平台，动态库的DLL部分被当做 <code>RUNTIME</code>,导入库视为 <code>ARCHIVE</code>;</li><li>索引基于Windows的系统包括(Cygwin)是DLL平台。</li><li>目标库视为 <code>OBJECTS</code>；</li><li><code>ARCHIVE</code>, <code>LIBRARY</code>, <code>RUNTIME</code>, <code>OBJECTS</code> 与 <code>FRAMEWORK</code>改变后续属性所作用的目标的类型。如果不指定，则安装属性适用所有目标类型。 如果仅给出一个，则将仅安装该类型的目标（可用于仅安装DLL或导入库）。</li></ol><h2 id="静态库、动态库、导入库"><a href="#静态库、动态库、导入库" class="headerlink" title="静态库、动态库、导入库"></a>静态库、动态库、导入库</h2><table><thead><tr><th align="center">×</th><th align="center">windows（gcc）</th><th align="center">windows（msvc）</th><th align="center">linux</th></tr></thead><tbody><tr><td align="center">静态库</td><td align="center">.lib</td><td align="center">.lib</td><td align="center">.a</td></tr><tr><td align="center">动态库（运行时使用）</td><td align="center">.dll</td><td align="center">.dll</td><td align="center">.so</td></tr><tr><td align="center">导入库（编译链接时使用）</td><td align="center">.dll.a</td><td align="center">.lib</td><td align="center">.so文件兼作动态库和导入库</td></tr></tbody></table><blockquote><p>导入库： 让加载和使用动态库的过程变得自动化的库，在编译时链接到程序中，然后使得动态库的功能可以像静态库一样有效地使用  。<br>导入库包含被 DLL 导出的函数和变量的符号名， DLL 包含实际的函数和数据。在编译链接可执行文件时，只需要链接导入库，DLL中的函数代码和数据并不复制到可执行文件中，在运行的时候，再去加载DLL，访问DLL中导出的函数。</p><p>MSVC 与 MingGW 编译的静态库，不通用（两者编译器生成的 .o 跟 .obj 目标文件是 ABI 兼容的，但是他们的链接器不通用）。而动态库文件 .dll 是通用的</p></blockquote><h3 id="静态库（归档）与静态链接"><a href="#静态库（归档）与静态链接" class="headerlink" title="静态库（归档）与静态链接"></a>静态库（归档）与静态链接</h3><p>由直接编译并链接到程序中的例程组成。编译使用静态库的程序时，程序所使用的静态库的所有功能都将成为可执行文件的一部分。在Windows上，静态库通常具有.lib扩展名，而在linux上，静  态库通常具有.a（archive）扩展名<br>静态库的一个优点是，用户只需发布可执行文件即可。由于库成为程序的一部分，这将确保程序始终使用正确版本的库。另外，因为静态库成为程序的一部分，所以可以像为自己的程序编写的功能一样使用它们。<br>缺点是，由于库的副本成为使用它的每个可执行文件的一部分，这可能会造成大量的空间浪费。静态库也不容易升级——要更新库，需要替换整个可执行文件</p><h3 id="动态库（共享库）与动态链接"><a href="#动态库（共享库）与动态链接" class="headerlink" title="动态库（共享库）与动态链接"></a>动态库（共享库）与动态链接</h3><p>由运行时加载到应用程序中的子程序组成。当编译使用动态库的程序时，库不会成为可执行文件的一部分，而是作为单独的单元保留。在Windows上，动态库通常具有.dll（动态链接库）扩展名，而在Linux上，动态库通常具有.so（共享对象）扩展名。</p><blockquote><p>动态库的一个优点是许多程序可以共享一个副本，这节省了空间。</p><p>动态库可以升级到一个新版本，而不必替换使用它的所有可执行文件。</p><p>由于动态库未链接到程序中，因此使用动态库的程序必须显式加载并与动态库交互。这种机制可能会让人困惑，并使与动态库的交互变得不易处理。为了使动态库更易于使用，可以使用导入库。</p></blockquote><h4 id="装载时动态链接（Load-time-Dynamic-Linking）"><a href="#装载时动态链接（Load-time-Dynamic-Linking）" class="headerlink" title="装载时动态链接（Load-time Dynamic Linking）"></a>装载时动态链接（Load-time Dynamic Linking）</h4><p>这种用法的前提是在编译之前已经明确知道要调用DLL中的哪几个函数，编译时在目标文件中只保留必要的链接信息，而不含DLL函数的代码；当程序执行时，调用函数的时候利用链接信息加载DLL函数代码并在内存中将其链接入调用程序的执行空间中(全部函数加载进内存），其主要目的是便于代码共享。（动态加载程序，处在加载阶段，主要为了共享代码，共享代码内存）</p><h4 id="运行时动态链接（Run-time-Dynamic-Linking）"><a href="#运行时动态链接（Run-time-Dynamic-Linking）" class="headerlink" title="运行时动态链接（Run-time Dynamic Linking）"></a>运行时动态链接（Run-time Dynamic Linking）</h4><p>这种方式是指在编译之前并不知道将会调用哪些DLL函数，完全是在运行过程中根据需要决定应调用哪个函数，将其加载到内存中（只加载调用的函数进内存），并标识内存地址，其他程序也可以使用该程序，并用LoadLibrary和GetProcAddress动态获得DLL函数的入口地址。（dll在内存中只存在一份，处在运行阶段）</p><p>####Wwindows 下动态链接库的查找顺序</p><p>exe文件在执行的时候，检索dll文件的顺序如下:</p><ol><li>应用程序所在目录 exe</li><li>当前目录</li><li>系统目录 : C:\Windows\System32</li><li>Windows目录: C:\Windows</li><li>环境变量PATH中所有目录</li></ol><p>所以使用编译好的dll 库的三种常见做法</p><ol><li>将 dll 文件与应用程序exe，放置到同一个目录</li><li>将 dll 文件拷贝&#x2F;安装到 C:\Windows\System32</li><li>将 dll 文件夹所在的路径添加到系统环境变量PATH里面</li></ol><blockquote><p>CMAKE的TARGET_LINK_LIBRARIES 指令，只负责编译过程。exe执行的时候，并不会按照CMake文件里面指定的路径来查找dll路径，而是遵循Windows下动态链接库的查找顺序</p><p>如果没有设置的话，出现的情况就是 exe 编译成功，运行的时候不执行任何操作就结束</p></blockquote><h3 id="导入库"><a href="#导入库" class="headerlink" title="导入库"></a>导入库</h3><p>让加载和使用动态库的过程变得自动化的库。在Windows上，这通常是通过与动态库（.dll）同名的小型静态库（.lib）来完成的。小型静态库在编译时链接到程序中，然后动态库的功能可以像静态库一样有效地使用。在Linux上，共享对象（.so）文件兼作动态库和导入库。大多数链接器可以在创建动态库时为动态库构建导入库。</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的Vcode+MinGW+vcpkg的使用</title>
    <link href="/posts/b10dd6ef.html"/>
    <url>/posts/b10dd6ef.html</url>
    
    <content type="html"><![CDATA[<h1 id="windows下的Vscode-MinGW-Vcpkg的使用"><a href="#windows下的Vscode-MinGW-Vcpkg的使用" class="headerlink" title="windows下的Vscode-MinGW-Vcpkg的使用"></a>windows下的Vscode-MinGW-Vcpkg的使用</h1><h2 id="Vscode-安装"><a href="#Vscode-安装" class="headerlink" title="Vscode 安装"></a>Vscode 安装</h2><p>Microsoft Store 中安装</p><h3 id="Vscode-右键菜单”置"><a href="#Vscode-右键菜单”置" class="headerlink" title="Vscode 右键菜单”置"></a>Vscode 右键菜单”置</h3><p>##W# 空白处右键菜”里显示”Open with Code”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reg">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode]<br>@=&quot;Open with Code&quot;<br>&quot;Icon&quot;=&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe&quot;<br><br>[HKEY_CLASSES_ROOT\Directory\Background\shell\VSCode\command]<br>@=&quot;\&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;<br></code></pre></td></tr></table></figure><h4 id="选中文件右键”单里显示”Wpen-with”Code”"><a href="#选中文件右键”单里显示”Wpen-with”Code”" class="headerlink" title="选中文件右键”单里显示”Wpen with”Code”"></a>选中文件右键”单里显示”Wpen with”Code”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reg">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\*\shell\VSCode]<br>@=&quot;Open with Code&quot;<br>&quot;Icon&quot;=&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe&quot;<br><br>[HKEY_CLASSES_ROOT\*\shell\VSCode\command]<br>@=&quot;\&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe\&quot; \&quot;%1\&quot;&quot;<br></code></pre></td></tr></table></figure><h4 id="选中文件夹右键”单里显示”Wpen-with”Code”"><a href="#选中文件夹右键”单里显示”Wpen-with”Code”" class="headerlink" title="选中文件夹右键”单里显示”Wpen with”Code”"></a>选中文件夹右键”单里显示”Wpen with”Code”</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reg">Windows Registry Editor Version 5.00<br><br>[HKEY_CLASSES_ROOT\Directory\shell\VSCode]<br>@=&quot;Open with Code&quot;<br>&quot;Icon&quot;=&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe&quot;<br><br>[HKEY_CLASSES_ROOT\Directory\shell\VSCode\command]<br>@=&quot;\&quot;C:\\Program Files\\Microsoft VS Code\\Code.exe\&quot; \&quot;%V\&quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="Vscode-需要的插件"><a href="#Vscode-需要的插件" class="headerlink" title="Vscode 需要的插件"></a>Vscode 需要的插件</h3><ol><li>C&#x2F;C++</li><li>CMake</li><li>CMake Tools</li></ol><h2 id="MingGW-安装"><a href="#MingGW-安装" class="headerlink" title="MingGW 安装"></a>MingGW 安装</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">scoop install gcc -g<br>```M<br>## make 安装<br><br>```<span class="hljs-built_in">cmd</span><br>scoop install make -g<br></code></pre></td></tr></table></figure><p>##Ccmake 安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">scoop install cmake -g<br></code></pre></td></tr></table></figure><p>##Vvcpkg 安装</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">scoop install vcpkg -g<br></code></pre></td></tr></table></figure><h2 id="Vscode中配置使用-MinGW-Ccmake-Vvcpkg"><a href="#Vscode中配置使用-MinGW-Ccmake-Vvcpkg" class="headerlink" title="Vscode中配置使用 MinGW +Ccmake +Vvcpkg"></a>Vscode中配置使用 MinGW +Ccmake +Vvcpkg</h2><h3 id="配置系统环境变量"><a href="#配置系统环境变量" class="headerlink" title="配置系统环境变量"></a>配置系统环境变量</h3><table><thead><tr><th align="center">环境变量</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">VCPKG_DEFAULT_TRIPLET</td><td align="center">x64-mingw-dynamic</td></tr><tr><td align="center">VCPKG_DEFAULT_HOST_TRIPLET</td><td align="center">x64-mingw-dynamic</td></tr></tbody></table><h3 id="初始化Vvcpkg-并安装包"><a href="#初始化Vvcpkg-并安装包" class="headerlink" title="初始化Vvcpkg 并安装包"></a>初始化Vvcpkg 并安装包</h3><p><a href="https://github.com/microsoft/vcpkg/blob/master/README_zh_CN.md">中文官网</a></p><p><a href="https://github.com/microsoft/vcpkg/blob/master/docs/users/mingw.md">vcpkg and Mingw-w64</a></p><h3 id="配置Vvscode-settings-json"><a href="#配置Vvscode-settings-json" class="headerlink" title="配置Vvscode settings.json"></a>配置Vvscode settings.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;cmake.cmakePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[cmake root]/bin/cmake.exe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;cmake.mingwSearchDirs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;[MinGW root]/bin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;cmake.configureSettings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CMAKE_TOOLCHAIN_FILE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;[vcpkg root]/scripts/buildsystems/vcpkg.cmake&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>在项目的 CMakeLists.t加 x 添 加  加<br>(有时候配置的系统环境变量会失效。。。)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">set</span>(VCPKG_TARGET_TRIPLET &quot;x64-mingw-dynamic&quot; CACHE STRING &quot;VCPKG Target Triplet to use&quot;)<br><span class="hljs-built_in">set</span>(VCPKG_DEFAULT_HOST_TRIPLET &quot;x64-mingw-dynamic&quot;)<br></code></pre></td></tr></table></figure><blockquote><p>如果要使用静态链接库，将 dynamic 替换为 static 并提前安装好对应的静态库即可</p></blockquote><p>参考链接：</p><p><a href="https://blog.csdn.net/weixin_40448140/article/details/109111042">vcpkg+CLion+cmake+MinGW使用</a></p><p><a href="https://zhuanlan.zhihu.com/p/563999913">Windows C++配置 vscode 与 vcpkg</a></p><p><a href="https://zhuanlan.zhihu.com/p/430835667">vscode + cmake + vcpkg搭建c++开发环境</a></p>]]></content>
    
    
    <categories>
      
      <category>软件及自定义配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具使用</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的常用软件</title>
    <link href="/posts/956c243c.html"/>
    <url>/posts/956c243c.html</url>
    
    <content type="html"><![CDATA[<h1 id="Windows下的常用软件"><a href="#Windows下的常用软件" class="headerlink" title="Windows下的常用软件"></a>Windows下的常用软件</h1><h2 id="编程类"><a href="#编程类" class="headerlink" title="编程类"></a>编程类</h2><table><thead><tr><th align="center">软件名</th><th align="center">相关链接</th><th align="center">推荐安装源</th></tr></thead><tbody><tr><td align="center">Powershell</td><td align="center"><a href="https://learn.microsoft.com/zh-cn/powershell/">√</a></td><td align="center">Microsoft Store</td></tr><tr><td align="center">Windows Terminal</td><td align="center"><a href="https://learn.microsoft.com/zh-cn/windows/terminal/">√</a></td><td align="center">Microsoft Store</td></tr><tr><td align="center">winget</td><td align="center"><a href="https://learn.microsoft.com/zh-cn/windows/package-manager/winget/">√</a></td><td align="center">安装包</td></tr><tr><td align="center">scoop</td><td align="center"><a href="https://github.com/ScoopInstaller/Install#advanced-installation">√</a></td><td align="center">Powershell命令行</td></tr><tr><td align="center">git</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">vscode</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><table><thead><tr><th align="center">软件名</th><th align="center">相关链接</th><th align="center">推荐安装源</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="生活类"><a href="#生活类" class="headerlink" title="生活类"></a>生活类</h2><table><thead><tr><th align="center">软件名</th><th align="center">相关链接</th><th align="center">推荐安装源</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>软件及自定义配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>软件推荐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的shell增强与美化</title>
    <link href="/posts/42b410e0.html"/>
    <url>/posts/42b410e0.html</url>
    
    <content type="html"><![CDATA[<h2 id="Powershell"><a href="#Powershell" class="headerlink" title="Powershell"></a>Powershell</h2><blockquote><p>微软发布的一种命令行外壳程序和脚本环境，使命令行用户和脚本编写者可以利用. NET Framework的强大功能。</p></blockquote><p>安装：Microsoft Store</p><h3 id="Powershell-插件安装"><a href="#Powershell-插件安装" class="headerlink" title="Powershell 插件安装"></a>Powershell 插件安装</h3><p>教程：</p><p><a href="https://zhuanlan.zhihu.com/p/444165353">配置和美化你的powershell终端</a></p><p><a href="https://www.timor.icu/posts/5b87f952">让你的 Windows 终端更好看</a></p><p><a href="https://juejin.cn/post/7136743827573833764#heading-8">windows系统终端美化计划</a></p><p><a href="https://blog.unclezs.com/pages/9b6e12/#%E7%9B%AE%E5%BD%95%E8%B7%B3%E8%BD%AC">打造好用的PowerShell媲美oh-my-zsh</a></p><p><a href="https://cloud.tencent.com/developer/article/2054138">Windows 11和vscode终端美化</a></p><h2 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h2><blockquote><p>面向Windows10的新虚拟终端</p></blockquote><p>安装：Microsoft Store</p><h3 id="Windows-Terminal-自定义配置"><a href="#Windows-Terminal-自定义配置" class="headerlink" title="Windows Terminal 自定义配置"></a>Windows Terminal 自定义配置</h3><p>教程：</p><p><a href="https://zhuanlan.zhihu.com/p/272082726">Windows Terminal完整指南</a></p><p><a href="https://sspai.com/post/59380">新生代 Windows 终端：Windows Terminal 的全面自定义</a></p><p><a href="https://www.zhihu.com/question/330813656">Windows Terminal 配色方案</a></p>]]></content>
    
    
    <categories>
      
      <category>软件及自定义配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>shell</tag>
      
      <tag>功能增强</tag>
      
      <tag>美化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows下的包管理工具</title>
    <link href="/posts/b4142dac.html"/>
    <url>/posts/b4142dac.html</url>
    
    <content type="html"><![CDATA[<h1 id="Windows下的包管理工具"><a href="#Windows下的包管理工具" class="headerlink" title="Windows下的包管理工具"></a>Windows下的包管理工具</h1><h2 id="Microsoft-Store"><a href="#Microsoft-Store" class="headerlink" title="Microsoft Store"></a>Microsoft Store</h2><blockquote><p>Windows 应用商店</p></blockquote><h2 id="Winget"><a href="#Winget" class="headerlink" title="Winget"></a>Winget</h2><blockquote><p>Windows 软件包管理器</p></blockquote><p>安装：<a href="https://aka.ms/getwinget">https://aka.ms/getwinget</a></p><p>相关网站：</p><p><a href="https://winget.run/">winget.run</a></p><p><a href="https://winstall.app/">winstall.app</a></p><p>相关教程：</p><p><a href="https://zhuanlan.zhihu.com/p/143123689">winget简单体验</a></p><h2 id="Scoop"><a href="#Scoop" class="headerlink" title="Scoop"></a>Scoop</h2><blockquote><p>Scoop专注于开源的命令行工具，使用 Scoop 安装的应用程序通常称为”便携式”应用程序，需要的权限更少，对系统产生的副作用也更少。适合配合防火墙使用，当安装一些功能上不需要联网的软件时禁用自动更新功能并用防火墙彻底禁止其联网，所有升级操作都用scoop来完成。</p></blockquote><p>安装：</p><p><a href="https://github.com/ScoopInstaller/Install#advanced-installation">https://github.com/ScoopInstaller/Install#advanced-installation</a></p><p>第三方仓库源：</p><p><a href="https://github.com/kkzzhizhou/scoop-apps">https://github.com/kkzzhizhou/scoop-apps</a></p><p><a href="https://github.com/l-trump/scoop-raresoft">https://github.com/l-trump/scoop-raresoft</a></p><p>相关教程：</p><p><a href="https://github.com/L-Trump/Scoop-CHS">Scoop介绍与中文汉化</a></p><p><a href="https://zhuanlan.zhihu.com/p/135278662">你需要掌握的Scoop技巧和知识</a></p><p><a href="https://sspai.com/post/52710">给 Scoop 加上这些软件仓库，让它变成强大的 Windows 软件管理器</a></p><p><a href="https://www.iamzs.top/archives/scoop-guidebook.html#scoop-install">Scoop 不完全上手指南</a></p><h2 id="通过安装包进行安装"><a href="#通过安装包进行安装" class="headerlink" title="通过安装包进行安装"></a>通过安装包进行安装</h2>]]></content>
    
    
    <categories>
      
      <category>软件及自定义配置</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>工具</tag>
      
      <tag>包管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/posts/2f57a694.html"/>
    <url>/posts/2f57a694.html</url>
    
    <content type="html"><![CDATA[<p>表达式测试网站：<a href="regex101.com">regex101.com</a></p><p>表达式学习网站：<a href="https://deerchao.cn/tutorials/regex/regex.htm">deerchao.cn&#x2F;tutorials&#x2F;regex&#x2F;regex.htm</a></p>]]></content>
    
    
    <categories>
      
      <category>必学工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
      <tag>常用</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
